---
- name: test the complex_password module and complex_password lookup plugin
  hosts: localhost
  gather_facts: false

  tasks:

    - name: test the complex_password lookup plugin with default rules
      assert:
        that:
          - pwd | length == 12
          - pwd | regex_findall('(?=[A-Z])') | length >= 2
          - pwd | regex_findall('(?=[a-z])') | length >= 2
          - pwd | regex_findall('(?=[0-9])') | length >= 2
          - pwd | regex_findall('(?=[/*!\"$%()=?{[\]}+#-.,<\'_:;>~|@])') | length >= 2
      vars:
        pwd: "{{ lookup('complex_password') }}"

    - name: test the complex_password lookup plugin with custom rules
      assert:
        that:
          - pwd | length == 14
          - pwd | regex_findall('(?=[A-Z])') | length >= 2
          - pwd | regex_findall('(?=[a-z])') | length >= 3
          - pwd | regex_findall('(?=[0-9])') | length >= 4
          - pwd | regex_findall('(?=[+-@!])') | length >= 5
      vars:
        pwd: "{{ lookup('complex_password',length=14, min_upper_case=2, min_lower_case=3, min_digit=4, min_special=5, special_characters='+-@!', prevent_repeating_characters=False) }}"

    - name: generate a complex password with default rules in check mode
      complex_password:
      check_mode: true  

    - name: test the password with default rules in check_mod
      assert:
        that:
          - complex_password | length == 0

    - name: generate a complex password with default rules
      complex_password:

    - name: test the password with default rules
      assert:
        that:
          - complex_password | length == 12
          - complex_password | regex_findall('(?=[A-Z])') | length >= 2
          - complex_password | regex_findall('(?=[a-z])') | length >= 2
          - complex_password | regex_findall('(?=[0-9])') | length >= 2
          - complex_password | regex_findall('(?=[/*!\"$%()=?{[\]}+#-.,<\'_:;>~|@])') | length >= 2

    - name: generate a complex password with custom rules
      complex_password:
        length: 14
        min_upper_case: 2
        min_lower_case: 3
        min_digit: 4
        min_special: 5
        special_characters: "+-@!"
        prevent_repeating_characters: no

    - name: test the password with custom rules
      assert:
        that:
          - complex_password | length == 14
          - complex_password | regex_findall('(?=[A-Z])') | length >= 2
          - complex_password | regex_findall('(?=[a-z])') | length >= 3
          - complex_password | regex_findall('(?=[0-9])') | length >= 4
          - complex_password | regex_findall('(?=[+-@!])') | length >= 5

    - name: generate a complex password with upper case characters only
      complex_password:
        length: 16
        min_upper_case: 5
        min_lower_case: -1
        min_digit: -1
        min_special: -1

    - name: test the password with upper case characters only
      assert:
        that:
          - complex_password | length == 16
          - complex_password | regex_findall('(?=[A-Z])') | length >= 5
          - complex_password | regex_findall('(?=[a-z])') | length == 0
          - complex_password | regex_findall('(?=[0-9])') | length == 0
          - complex_password | regex_findall('(?=[/*!\"$%()=?{[\]}+#-.,<\'_:;>~|@])') | length == 0

    - name: generate a complex password with lower case characters only
      complex_password:
        length: 16
        min_upper_case: -1
        min_lower_case: 5
        min_digit: -1
        min_special: -1

    - name: test the password with lower case characters only
      assert:
        that:
          - complex_password | length == 16
          - complex_password | regex_findall('(?=[A-Z])') | length == 0
          - complex_password | regex_findall('(?=[a-z])') | length >= 5
          - complex_password | regex_findall('(?=[0-9])') | length == 0
          - complex_password | regex_findall('(?=[/*!\"$%()=?{[\]}+#-.,<\'_:;>~|@])') | length == 0

    - name: generate a complex password with digits characters only
      complex_password:
        length: 16
        min_upper_case: -1
        min_lower_case: -1
        min_digit: 5
        min_special: -1
        prevent_repeating_characters: no

    - name: test the password with digits characters only
      assert:
        that:
          - complex_password | length == 16
          - complex_password | regex_findall('(?=[A-Z])') | length == 0
          - complex_password | regex_findall('(?=[a-z])') | length == 0
          - complex_password | regex_findall('(?=[0-9])') | length >= 5
          - complex_password | regex_findall('(?=[/*!\"$%()=?{[\]}+#-.,<\'_:;>~|@])') | length == 0

    - name: generate a complex password with special characters only
      complex_password:
        length: 16
        min_upper_case: -1
        min_lower_case: -1
        min_digit: -1
        min_special: 5
        prevent_repeating_characters: no

    - name: test the password with special characters only
      assert:
        that:
          - complex_password | length == 16
          - complex_password | regex_findall('(?=[A-Z])') | length == 0
          - complex_password | regex_findall('(?=[a-z])') | length == 0
          - complex_password | regex_findall('(?=[0-9])') | length == 0
          - complex_password | regex_findall('(?=[/*!\"$%()=?{[\]}+#-.,<\'_:;>~|@])') | length >= 5

    - name: generate a complex password with upper case characters and digits only
      complex_password:
        length: 16
        min_upper_case: 5
        min_lower_case: -1
        min_digit: 3
        min_special: -1

    - name: test the password with upper case characters and digits only
      assert:
        that:
          - complex_password | length == 16
          - complex_password | regex_findall('(?=[A-Z])') | length >= 5
          - complex_password | regex_findall('(?=[a-z])') | length == 0
          - complex_password | regex_findall('(?=[0-9])') | length >= 3
          - complex_password | regex_findall('(?=[/*!\"$%()=?{[\]}+#-.,<\'_:;>~|@])') | length == 0

    - name: generate a complex password with forbidden_characters
      complex_password:
        length: 57
        min_upper_case: 24
        min_lower_case: 24
        min_digit: 8
        min_special: 1
        special_characters: "!$"
        forbidden_characters: ABab01$

    - name: test the password with forbidden_characters
      assert:
        that:
          - complex_password | length == 57
          - complex_password | regex_findall('(?=[A-Z])') | length == 24
          - complex_password | regex_findall('(?=[ABab01$])') | length == 0
          - complex_password | regex_findall('(?=[a-z])') | length == 24
          - complex_password | regex_findall('(?=[0-9])') | length == 8
          - complex_password | regex_findall('(?=[!$])') | length == 1
